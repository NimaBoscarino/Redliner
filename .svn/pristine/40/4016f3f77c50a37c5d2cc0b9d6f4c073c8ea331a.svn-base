@{
    Hatfield.WebMap.Domain.WebMappingSite site = ViewBag.site;    
}
    <script>
    /* Global page variables */
    var numLayersLoading = 0;
    var map = null;
    var identifiedFeature = null;
    var allLayers = null; // L.layerGroup();
    var queryTemplates = {};

    @if (HttpContext.Current.IsDebuggingEnabled)
        {
            // @:queryTemplates["toc-default"] = "{{=it.i}}: {{=it.layerName}} [{{~it.parentTreeNodes :pNode:i}}{{=pNode.text}} | {{~}}] (custom template: {{=it.templateName}})";
                }
        else
        {
            // @:queryTemplates["toc-default"] = "{{=it.i}}: {{~it.parentTreeNodes :pNode:i}}{{=pNode.text}} | {{~}} {{=it.layerName}}";
                }
    queryTemplates["toc-default"] = "{{=it.i}}: {{=it.layerName}}";
    queryTemplates["layer_3-toc-53"] = "{{=it.i}}: {{=it.layerName}} - {{=it.feature.properties.Matrix}}";
    queryTemplates["layer_3-toc-96"] = "{{=it.i}}: DU: {{=it.feature.properties['DU ID']}}";
    queryTemplates["layer_3-toc-98"] = "{{=it.i}}: Sub-DU: {{=it.feature.properties['DU ID']}} - {{=it.feature.properties['subDU']}}";

    /*
        queryTemplates["layer_3-toc-100"] = "{{=it.i}}: {{=it.layerName}} [{{=it.feature.properties.duname}}] ";
        queryTemplates["layer_3-toc-99"] = "{{=it.i}}: DU '{{=it.feature.properties.DU_ID}}' ";
        // queryTemplates["layer_3-toc-97"] = "{{=i}}: {{=layerName}} [{{=feature.properties.DU_ID}}{{=feature.properties.Land Use}}] ";
        queryTemplates["layer_3-toc-97"] = "{{=it.i}}: {{=it.feature.properties['Land Use']}} Land Use ";
        queryTemplates["layer_3-toc-89"] = "{{=it.i}}: {{=it.layerName}} [DU: {{=it.feature.properties.DU_ID}}]";
        queryTemplates["layer_3-toc-52"] = "{{=it.i}}: DU Soil Exceedance 0-30cm [{{=it.feature.properties.DU_ID}}]";
        queryTemplates["layer_3-toc-53"] = "{{=it.i}}: Sub-DU {{=it.feature.properties.DU_ID}} Soil Exceedance 0-30cm? {{? it.feature.properties.Exceeds == 'False'}}No Concern{{??}}Of Concern{{?}} ";

        queryTemplates["layer_3-toc-96"] = "{{=it.i}}: {{=it.layerName}}? {{? it.feature.properties.Of_Concern == 'False'}}No Concern{{??}}Of Concern{{?}}";

        queryTemplates["layer_3-toc-88"] = "{{=it.i}}: DU exceeds at {{=it.layerName}} depth? {{? it.feature.properties.Exceeds == 'False'}}No Concern{{??}}Of Concern{{?}}";
        queryTemplates["layer_3-toc-89"] = "{{=it.i}}: DU exceeds at {{=it.layerName}} depth? {{? it.feature.properties.Exceeds == 'False'}}No Concern{{??}}Of Concern{{?}}";
        queryTemplates["layer_3-toc-90"] = "{{=it.i}}: DU exceeds at {{=it.layerName}} depth? {{? it.feature.properties.Exceeds == 'False'}}No Concern{{??}}Of Concern{{?}}";
        queryTemplates["layer_3-toc-91"] = "{{=it.i}}: DU exceeds at {{=it.layerName}} depth? {{? it.feature.properties.Exceeds == 'False'}}No Concern{{??}}Of Concern{{?}}";
        queryTemplates["layer_3-toc-92"] = "{{=it.i}}: DU exceeds at {{=it.layerName}} depth? {{? it.feature.properties.Exceeds == 'False'}}No Concern{{??}}Of Concern{{?}}";
        queryTemplates["layer_3-toc-93"] = "{{=it.i}}: DU exceeds at {{=it.layerName}} depth? {{? it.feature.properties.Exceeds == 'False'}}No Concern{{??}}Of Concern{{?}}";
        queryTemplates["layer_3-toc-94"] = "{{=it.i}}: DU exceeds at {{=it.layerName}} depth? {{? it.feature.properties.Exceeds == 'False'}}No Concern{{??}}Of Concern{{?}}";
        queryTemplates["layer_3-toc-95"] = "{{=it.i}}: DU exceeds at {{=it.layerName}} depth? {{? it.feature.properties.Exceeds == 'False'}}No Concern{{??}}Of Concern{{?}}";

        queryTemplates["layer_3-toc-101"] = "{{=it.i}}: Sub-DU '{{=it.feature.properties.DU_ID}} {{=it.feature.properties.subDU}}' ";
        */
    function startLayerLoading()
    {
        $('.map-loading-icon').show();
        numLayersLoading++;
    }

    function endLayerLoading()
    {
        numLayersLoading--;
        if (numLayersLoading <= 0)
        {
            numLayersLoading = 0;
            $('.map-loading-icon').hide();
        }
    }


    function zoomToIdentifiedFeature()
    {
        map.fitBounds(identifiedFeature.getBounds());
    }

    function showGeoJson(encodedgeoJson)
    {
        if (identifiedFeature) {
            map.removeLayer(identifiedFeature);
        }
        var geoJsonStr = decodeURIComponent(encodedgeoJson);
        var f = JSON.parse(geoJsonStr);
        identifiedFeature = new L.GeoJSON(f, {
            style: function () {
                return {
                    color: '#FFFF00',
                    weight: 10
                };
            }
        }).addTo(map);
        // this geJson overlay isn't visible when an imageOverlay also exists. Let's make it visible in front of these other overlays.
        // bringToFront doesn't work - it doesn't update the zIndex geoJsonLayer.bringToFront();
        // setting geoJsonLayer._layers[key]._container.style.zIndex = 20; doesn't work either
        if (identifiedFeature._map._pathRoot)
            identifiedFeature._map._pathRoot.style.zIndex = 30;


        if (identifiedFeature._map._popup) {
            setTimeout(identifiedFeature._map._popup.update, 1500);
        }

    }

    $(document).ready(function () {


        // handling zoom level dependent layers: https://github.com/Leaflet/Leaflet/issues/823
        // handling zoom level dependent layers: http://wiki.openstreetmap.org/wiki/Zoom_levels

        map = L.map('map', { attributionControl: false, fullscreenControl: true }).setView([@site.InitialMapCenter.Latitude, @site.InitialMapCenter.Longitude], @site.InitialMapZoomLevel);

        L.control.scale({ imperial: false }).addTo(map);
        L.control.mouseCoordinate({ gps: false, utm: true, utmref: false }).addTo(map);

        allLayers = L.layerGroup();

        @{
            var layers = site.Layers;
            for (var i = 0; i < layers.Count(); i++ )
            {
                string layerName = "layer_" + (i + 1).ToString();

                var layer = layers.ElementAt(i);
                string jsCreate = layer.getJavascriptCreateStatement(layerName, site);
                @Html.Raw(jsCreate);
                @Html.Raw(Environment.NewLine);

                if (layer.RequiresAuthentication)
                {
                    @Html.Raw(layerName + ".authenticate('" + ViewBag.token + "');" + Environment.NewLine);
                }
                @Html.Raw("allLayers.addLayer(" + layerName + ");" + Environment.NewLine);
                if(layer.InitiallyVisible)
                {
                    @Html.Raw(layerName + ".addTo(map);" + Environment.NewLine);
                }

                if (layer.Queryable)
                {
                    @Html.Raw(layerName+".on('requestend', function () { $('.feature-query-loading-icon').hide(); });"+Environment.NewLine);
                    @Html.Raw(layerName+".on('requeststart', function () { $('.feature-query-loading-icon').removeClass('hidden').show(); });"+Environment.NewLine);

                }
                @Html.Raw(layerName + ".on('load', endLayerLoading);" + Environment.NewLine);
                @Html.Raw(layerName + ".on('loading', startLayerLoading);" + Environment.NewLine);
            }
        }



        var layerPicker = L.control.hattoc(allLayers, {
            spinnerImageUrl: '@Url.Content("~/js/jquery-aciTree-4.5.0-rc.10/image/load-root.gif")',
            treeAjaxUrl: '@Url.Action("GetACITreeTOCJsonData", "Home", new { site = site.urlParameter, view = ViewBag.currentViewName })' })
        .addTo(map);
        map._HatTOC = layerPicker;

        var measureoptions = {position: 'bottomleft', primaryLengthUnit: 'meters', primaryAreaUnit : 'sqmeters' };
        var measureControl = new L.Control.Measure(measureoptions);
        measureControl.addTo(map);


        var bienHoaSidebar = L.control.hatbienhoasidebar('bienHoaSidebar', {
            position: 'left',
            hatTOC: layerPicker,
            ajaxUrl: '@Url.Action("DUReport", "BienHoaData")',
            spinnerImageUrl: '@Url.Content("~/js/jquery-aciTree-4.5.0-rc.10/image/load-root.gif")',
            pointReportLayer: layer_3
        });

        map.addControl(bienHoaSidebar);

        map.on("popupclose", function () {
            if (identifiedFeature) {
                map.removeLayer(identifiedFeature);
            }
        }); // popuponclose


        map.on('click', function (e) {
            if (!layer_3.options.layers)
            {
                return;
            }
            // L.Control.Measure is enabled and running.
            if ($('.js-measuretasks').is(':visible'))
            {
                return true;
            }

            return;
            $('#feature-query-loading-icon').show();
            var layersCmd = 'all:' + layer_3.options.layers.join(',');
            var tolerancePx = 5; // default is 2
            layer_3.identify().on(map).at(e.latlng).layers(layersCmd).tolerance(tolerancePx).run($.proxy(function (error, featureCollection) {
                $('#feature-query-loading-icon').hide();
                if (error || featureCollection.features.length === 0) {
                    return false;
                }

                var hatTocControl = map._HatTOC;
                var popupHtml = "";
                if (featureCollection.features.length > 1)
                {
                    popupHtml += '<div id="popuptoc" class="list-group">';
                    popupHtml += '<strong>'+featureCollection.features.length + " features were found:</strong>";
                    for (var i = 0; i < featureCollection.features.length; i++) {
                        var f = featureCollection.features[i];

                        if (f.layerId == 98)
                        {
                            // sub-du: hide (do not show)
                        }
                        else
                        {

                            var popupcontentid = "popuptab" +f.layerId.toString()+ f.id;
                            var aciTreeNode = hatTocControl.getTreeNodeByEsriLayerId(layer_3, f.layerId);
                            var layerName = aciTreeNode.itemData.label;

                            var geoJsonString = encodeURIComponent(JSON.stringify(f));

                            popupHtml += '<a href="#" class="list-group-item" onclick="$(\'#popuptoc\').hide(); $(\'#' + popupcontentid + '\').removeClass(\'hidden\'); $(\'#' + popupcontentid + '\').show();  showGeoJson(\'' + geoJsonString + '\');  return false;">';

                            var template = "";
                            var templateName = "layer_3-toc-"+f.layerId;
                            if (queryTemplates[templateName] != null)
                                template = queryTemplates[templateName];
                            else
                                template = queryTemplates["toc-default"];

                            /*
                            var parentTreeNodes = [];
                            for(var pIndex=0; pIndex < jsTreeNode.parents.length; pIndex++)
                            {
                                var parentNodeId = jsTreeNode.parents[pIndex];
                                var parNode = hatTocControl.jstree.get_node(parentNodeId);
                                if (parNode != null && parNode.text != null)
                                    parentTreeNodes.push(parNode);

                            }
                            */
                            // var templateInfo = {i: (i+1), layerName: layerName, jsTreeNode: jsTreeNode, leafletLayer: layer_3,  feature: f, templateName: templateName, parentTreeNodes: parentTreeNodes };

                            if(f.layerId == 96)
                            {
                                // DU
                                var templateInfo = {i: (i+1), layerName: layerName, aciTreeNode: aciTreeNode, leafletLayer: layer_3,  feature: f, templateName: templateName };

                                var tjsTemplate = doT.template(template);

                                popupHtml += "" + tjsTemplate(templateInfo);

                                popupHtml += '</a>';
                                var subDuDisplayId
                                popupHtml += ' (run Sub-DU Query Here)';

                                var subDUIDivId = "tocSubDus_"+f.properties.OBJECTID;
                                popupHtml += '<div id="'+subDUIDivId+'"></div>';
                                var findSubDUs = L.esri.Tasks.find(layer_3._service);

                                findSubDUs
                                    .text(f.properties['DU ID'])
                                    .layers("98");

                                findSubDUs.run(function(error, subDuFeatureCollection, response){
                                    var subDUHtml = "";

                                    for (var i = 0; i < subDuFeatureCollection.features.length; i++) {
                                        var subDuFeature = subDuFeatureCollection.features[i];
                                        subDUHtml += "<li>"+subDuFeature.properties['subDU']+"</li>";
                                    } // for
                                    $("#"+subDUIDivId).html(subDUHtml);
                                });

                            }
                            else
                            {
                                var templateInfo = {i: (i+1), layerName: layerName, aciTreeNode: aciTreeNode, leafletLayer: layer_3,  feature: f, templateName: templateName };

                                var tjsTemplate = doT.template(template);

                                popupHtml += tjsTemplate(templateInfo);
                                popupHtml += '</a>';
                            }
                            // popupHtml += (i+1).toString()+"- "+layerName;


                        } // else

                    } // for

                    popupHtml += '</div>';
                } // if

                for (var i = 0; i < featureCollection.features.length; i++) {
                    var f = featureCollection.features[i];
                    var id = "popuptab" + f.layerId.toString()+ f.id;
                    var geoJsonString = encodeURIComponent(JSON.stringify(f));

                    var aciTreeNode = hatTocControl.getTreeNodeByEsriLayerId(layer_3, f.layerId);
                    var layerName = (i + 1) + "- " + aciTreeNode.itemData.label;
                    var cls = "";
                    if (featureCollection.features.length > 1)
                        cls = " hidden ";
                    else
                    {
                        showGeoJson(geoJsonString);
                    }

                    popupHtml += '<div class="' + cls + '" id="' + id + '">';
                    popupHtml += '<strong>'+layerName+':</strong>';
                    popupHtml += '<table class="table table-condensed table-bordered " border="1" cellpadding="2" cellspacing="2">';
                    for (var key in f.properties) {
                        var keyUpper = key.toUpperCase();
                        if (f.properties[key] != 'NoData' && f.properties[key] != 'Null' && key != 'GEOMETRY' && keyUpper != 'SHAPE' && f.properties[key] != null
                            && keyUpper != 'SHAPE_Length'.toUpperCase() && keyUpper != 'OBJECTID' && keyUpper != 'fid'.toUpperCase()) {
                            var key_display = key;
                            var val_display = f.properties[key];

                            if (key_display.toUpperCase() == "SHAPE_Area".toUpperCase())
                            {
                                key_display = "Area (m<sup>2</sup>)";
                                // remove decimals
                                var parts = val_display.toString().split(".");
                                val_display = Number(parts[0]).toLocaleString()+" m<sup>2</sup>";
                            }

                            key_display = key_display.replace(/_/g," ");

                            popupHtml += '<tr><td>' + key_display + '</td><td>' + val_display + '</td></tr>'
                        }
                    }

                    @if (HttpContext.Current.IsDebuggingEnabled)
                    {
                        @:var tocTemplateName = "layer_3-toc-" + f.layerId;
                                                                                                                                                @:popupHtml += '<tr><td>TOC Template key: </td><td>' + tocTemplateName + '</td></tr>'
                                                                                                                                            }
                    popupHtml += '</table>';

                    popupHtml += '<div><a href="#" onclick="zoomToIdentifiedFeature(); return false;">zoom to feature</a></div>';

                    if (featureCollection.features.length > 1)
                        popupHtml += '<a href="#" onclick="$(\'#'+id+'\').hide(); $(\'#popuptoc\').show();">&lt; back to list</a>';

                    popupHtml += '</div>';

                } // for


                // show the popup
                L.popup({closeOnClick: true,minWidth: 200, maxHeight: 250})
                    .setLatLng(e.latlng)
                    .setContent(popupHtml)
                    .openOn(map);
            }, this));

        }); // map.click





        // -- set layer visibility
        $(document).on("change", ".layercheckbox", function () {
            var defs = {};
            $('.layercheckbox').each(function () {
                var checked = ($(this).prop("checked") == true);
                if (!checked) {
                    var queryfield = $(this).data("queryfield");
                    var layerid = $(this).data("layerid");
                    var layervalue = $(this).data("layervalue");
                    if (defs[layerid] != undefined)
                        defs[layerid] += " and ";
                    else
                        defs[layerid] = "";

                    defs[layerid] += " (" + queryfield + " <> '" + layervalue + "') ";
                }
            });

            // federalLands.setLayerDefs({ "1": "LandChange <> 'Re-vegetation' and LandChange <> 'No Change'" }); // parameter definition: http://resources.arcgis.com/en/help/arcgis-rest-api/#/Export_Map/02r3000000v7000000/
            layer_3.setLayerDefs(defs);
        }); // on checkbox checked

        var layerLabels;



    }); // document.ready
</script>

