using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace Hatfield.WebMap.Domain
{
    public enum WebMapControl { FullScreen, MouseCoordinates, Measure, TableOfContents, BienHoaSidebar, IdentifySidebar, Redliner, PanelManager, Hash, HatZedPanTo, hatPanel};

    public class WebMappingSite
    {
        public string urlParameter;
       
        public bool HasSiteSpecificLayoutFileName = false;
        private string _SiteSpecificLayoutFileName = string.Empty;

        public List<WebMapControl> MapControls = new List<WebMapControl>();
        public bool hasMapControl(WebMapControl control)
        {
            if (MapControls.IndexOf(control) >= 0)
                return true;
            else
                return false;
        }

        /// <summary>
        /// The name of the Layout file in the ~/Views/SiteLayouts/ folder specifically for this site. Note: should NOT include ".cshtml" extension.
        /// </summary>
        public string SiteSpecificLayoutFileName
        {
            get { return _SiteSpecificLayoutFileName; }
            set
            {
                _SiteSpecificLayoutFileName = value;
                if (!string.IsNullOrWhiteSpace(value))
                    HasSiteSpecificLayoutFileName = true;
            }
        }

        public string getViewLayoutPath()
        {
            
            if (!HasSiteSpecificLayoutFileName)
                return "~/Views/Shared/_Default_TopNavigation.cshtml";
            else
            {
                System.Text.StringBuilder sb = new System.Text.StringBuilder();
                sb.Append("~/Views/SiteLayouts/");
                sb.Append(SiteSpecificLayoutFileName);
                sb.Append(".cshtml");
                return sb.ToString();
            }
                

            
        }

        public bool HasSiteSpecificCssFileName = false;
        private string _SiteSpecificCssFileName = string.Empty;
        
        /// <summary>
        /// The name of the CSS file in the ~/css/sites/ folder specifically for this site. Note: should include ".css" extension.
        /// </summary>
        public string SiteSpecificCssFileName
        {
            get { return _SiteSpecificCssFileName; }
            set 
            { 
                _SiteSpecificCssFileName = value;
                if (!string.IsNullOrWhiteSpace(value))
                    HasSiteSpecificCssFileName = true;
                else
                    HasSiteSpecificCssFileName = false;
            }
        }

        public bool HasSiteSpecific_Map_HeaderScriptsAreaControl = false;
        private string _SiteSpecificMapScriptsAreaControl = string.Empty;
        /// <summary>
        /// The name of the .cshtml file in the ~/Views/Home/ folder specifically for this site. Note: should NOT include ".cshtml" extension.
        /// </summary>
        public string Map_HeaderScriptsAreaControl
        {
            get 
            {
                if (HasSiteSpecific_Map_HeaderScriptsAreaControl)
                    return "~/Views/SiteLayouts/" + _SiteSpecificMapScriptsAreaControl + ".cshtml";
                else
                    return "~/Views/Shared/_Default_MapScriptsAreaControl.cshtml";
            
            }
            set
            {
                _SiteSpecificMapScriptsAreaControl = value;
                if (!string.IsNullOrWhiteSpace(value))
                    HasSiteSpecific_Map_HeaderScriptsAreaControl = true;
                else
                    HasSiteSpecific_Map_HeaderScriptsAreaControl = false;
            }
        }

        public bool HasSiteSpecificTopNavigationControl = false;
        private string _SiteSpecificTopNavigationControl = string.Empty;
        /// <summary>
        /// The name of the .cshtml file in the ~/Views/Home/ folder specifically for this site. Note: should NOT include ".cshtml" extension.
        /// </summary>
        public string TopNavigationControlPath
        {
            get 
            {
                if (HasSiteSpecificTopNavigationControl)
                    return "~/Views/SiteLayouts/" + _SiteSpecificTopNavigationControl + ".cshtml";
                else
                    return "~/Views/Shared/_Default_TopNavigation.cshtml";
            }
            set
            {
                _SiteSpecificTopNavigationControl = value;
                if (!string.IsNullOrWhiteSpace(value))
                    HasSiteSpecificTopNavigationControl = true;
                else
                    HasSiteSpecificTopNavigationControl = false;
            }
        }
            

        /// <summary>
        /// setting this to FALSE makes the site publicly available without needing to log in
        /// </summary>
        public bool RequiresAuthentication;

        public bool RedirectToDashboardAfterLogin;

        public List<string> UsernamesWithAccess;

        /// <summary>
        /// The displayed title at the top of every page
        /// </summary>
        public string DisplayTitle;

        /// <summary>
        /// the HTML message to display once the user has logged out
        /// </summary>
        public string LoggedOutMessage;

        /// <summary>
        /// The HTML message to display to help the user on the Logout screen
        /// </summary>
        public string LoggedOutHelpMessage;

        public LatLng InitialMapCenter;

        public int InitialMapZoomLevel;

        public IList<Domain.IMapLayer> Layers;

        public Dictionary<string, string[]> CustomTOCSortOrder;

        public string ViewDisplayName;

        public WebMappingSite()
        {
            urlParameter = string.Empty;            
            RequiresAuthentication = false;
            RedirectToDashboardAfterLogin = false;
            UsernamesWithAccess = new List<string>();
            DisplayTitle = "";
            LoggedOutMessage = "";
            InitialMapCenter = new LatLng(49.3147419, -123.0967526); // Default to Hatfield's office in North Van
            InitialMapZoomLevel = 12;
            Layers = new List<Domain.IMapLayer>();
            CustomTOCSortOrder = new Dictionary<string, string[]>();
            ViewDisplayName = "";
        }

        public bool HasLayerOfType<T>()
        {
            foreach(var l in Layers)
            {
                if (l is T)
                    return true;
            }
            return false;
        }

        public IEnumerable<Domain.aciTree.aciTreeNode> ApplyCustomTOCSort(IEnumerable<Domain.aciTree.aciTreeNode> rootNodes)
        {

            if (CustomTOCSortOrder == null || CustomTOCSortOrder.Keys.Count == 0)
                return rootNodes;

            foreach(var parentNodeDisplay in CustomTOCSortOrder.Keys)
            {
                // -- get the nodes to sort
                List<Domain.aciTree.aciTreeNode> nodesToSort = new List<aciTree.aciTreeNode>();
                Domain.aciTree.aciTreeNode foundParentNode = null;
                if (parentNodeDisplay == "~" || parentNodeDisplay == "/" || parentNodeDisplay == "\\" || parentNodeDisplay == "~\\")
                    nodesToSort = rootNodes.ToList();
                else
                {
                    foundParentNode = GetNodeByNameRecursive(rootNodes, parentNodeDisplay);
                    if (parentNodeDisplay != null)
                        nodesToSort = foundParentNode.branch;
                }

                if (nodesToSort.Count > 0)
                {
                    // -- sort the nodes
                    foreach (var n in nodesToSort)
                        n.SortOrder_TOC = Int32.MaxValue; // place unsorted items at the bottom

                    for (int i = 0; i < CustomTOCSortOrder[parentNodeDisplay].Length; i++)
                    {
                        var nodeMatch = nodesToSort.Where(x => x.label.ToUpper() == CustomTOCSortOrder[parentNodeDisplay][i].ToUpper()).FirstOrDefault();
                        if (nodeMatch != null)
                            nodeMatch.SortOrder_TOC = i;
                    }
                    nodesToSort = nodesToSort.OrderBy(x => x.SortOrder_TOC).ThenBy(x => x.label).ToList();
                    if (foundParentNode != null)
                        foundParentNode.branch = nodesToSort;
                }
            }

            

            rootNodes = rootNodes.OrderBy(x => x.SortOrder_TOC).ThenBy(x=> x.label);
            return rootNodes;

        }

        /// <summary>
        ///  returns null if not found
        /// </summary>
        /// <param name="nodesToSearch"></param>
        /// <param name="displayNameToFind"></param>
        /// <returns></returns>
        public Domain.aciTree.aciTreeNode GetNodeByNameRecursive(IEnumerable<Domain.aciTree.aciTreeNode> nodesToSearch, string displayNameToFind)
        {
            if (nodesToSearch == null || nodesToSearch.Count() == 0 )
                return null;

            foreach(var node in nodesToSearch)
            {
                if (string.Compare(node.label, displayNameToFind) == 0)
                    return node;
                
                if (node.branch.Count > 0)
                {
                    // -- recurse into the tree
                    foreach(var childNode in nodesToSearch)
                    {
                        var childFind = GetNodeByNameRecursive(childNode.branch, displayNameToFind);
                        if (childFind != null)
                            return childFind;
                    }
                }
            }

            return null;
        }

        public bool NeedsToRedirectToLoginPage()
        {
            if (!RequiresAuthentication)
                return false;

            if (RequiresAuthentication && System.Web.HttpContext.Current != null && !System.Web.HttpContext.Current.User.Identity.IsAuthenticated)
                return true;
            else
            {
                string loggedInUserName = System.Web.HttpContext.Current.User.Identity.Name.ToUpper();
                if (UsernamesWithAccess.Where(x => x.ToUpper() == loggedInUserName).Count() > 0)
                    return false;
                else
                    return true;
            }
        }

        public System.Web.Mvc.ActionResult RedirectToLoginPageAction()
        {
            return new System.Web.Mvc.RedirectToRouteResult(GetLoginPageRoute());
            
        }

        public System.Web.Routing.RouteValueDictionary GetLoginPageRoute()
        {
            if (System.Web.HttpContext.Current != null)
            {
                return new System.Web.Routing.RouteValueDictionary() {
                    { "action", "Login" },
                    { "controller", "Home" },
                    { "site", this.urlParameter},
                    { "returnUrl", System.Web.HttpContext.Current.Request.Url.PathAndQuery }
                };
            }
            else
            {
                return new System.Web.Routing.RouteValueDictionary {
                    { "action", "Login" },
                    { "controller", "Home" },
                    { "site", this.urlParameter},
                    // { "returnUrl", System.Web.HttpContext.Current.Request.Url }
                };
            
            }
        }
        
    }
}