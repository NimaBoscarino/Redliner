using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace Hatfield.WebMap.Domain.Layers
{
    public class WMSLayer: IMapLayer
    {
        public string DisplayName { get; set; }
        public string urlFormat { get; set; }
        public bool detectRetina { get; set; }
        public double opacity { get; set; }
        public bool useCors { get; set; }
        public List<string> subdomains { get; set; }
        public LatLngBounds bounds { get; set; }
        public int maxNativeZoom { get; set; }
        public int maxZoom { get; set; }
        public bool InitiallyVisible { get; set; }
        public bool Queryable { get { return false; } } // always false

        public bool RequiresAuthentication { get; set; }

        public bool AuthenticationUsesBuiltInGeoServerAuthToken { get; set;  }
        public string GeoServerAuthTokenUsername { get; set; }

        public string Url
        {
            get
            {
                if (urlFormat.IndexOf("{s}", StringComparison.CurrentCultureIgnoreCase) >= 0)
                {
                    if (subdomains.Count == 0)
                        throw new ArgumentException("You need to specify subdomains if {s} is in the urlFormat");

                    // return urlFormat.Replace("{s}", subdomains[0]);
                    return urlFormat;
                }
                else
                {
                    return urlFormat;
                }
            }
        }


        public string AttributionHtml { get; set; }

        public List<string> WMSLayerNames { get; set;  }

        public void AddWMSLayerName(string wmsLayerName)
        {
            WMSLayerNames.Add(wmsLayerName);
        }

        public string WMSLayerNamesCSV
        {
            get { return string.Join(",", WMSLayerNames);  }
        }

        public enum WMSImageFormat { JPEG, PNG };
        public WMSImageFormat ImageFormat { get; set;  }

        public bool Transparent { get; set; }

        public string getJavascriptCreateStatement(string jsVarNameToCreate, WebMappingSite site)
        {
            List<string> quotedSubDomains = new List<string>();
            if (subdomains != null && subdomains.Count > 0)
            {
                foreach (var sub in subdomains)
                {
                    if (!string.IsNullOrWhiteSpace(sub))
                    {
                        quotedSubDomains.Add("'" + sub + "'");
                    }
                }
            }

            StringBuilder sb = new StringBuilder();
            sb.AppendLine(jsVarNameToCreate+" = L.tileLayer.wms( '" + Url + "', {");
            sb.AppendLine("layers: '" + WMSLayerNamesCSV + "', ");
            sb.AppendLine("tiled: true, ");            
            if (AttributionHtml != "")
            {
                sb.AppendLine("attribution: '" + AttributionHtml + "',");
            }

            if (AuthenticationUsesBuiltInGeoServerAuthToken)
            {
                string layerName = jsVarNameToCreate+site.urlParameter;
                string currentAppUsername = "";
                if (System.Web.HttpContext.Current != null && System.Web.HttpContext.Current.User != null && System.Web.HttpContext.Current.User.Identity != null && System.Web.HttpContext.Current.User.Identity.IsAuthenticated)
                {
                    currentAppUsername = System.Web.HttpContext.Current.User.Identity.Name;
                }

                var repo = new Repositories.GeoServerAuthKeyRepository();
                Repositories.GeoServerAuthKeyRepositoryItem item = new Repositories.GeoServerAuthKeyRepositoryItem()
                {
                    AuthKey = Guid.NewGuid(),
                    Site = site.urlParameter,
                    Layer = layerName,
                    ExpiryDateTime = DateTime.Now.AddSeconds(Repositories.GeoServerAuthKeyRepository.DEFAULT_IDLE_SECONDS),
                    GeoServerUsername = GeoServerAuthTokenUsername,
                    WebMappingAppLoggedInUsername = currentAppUsername
                };


                var existingItem = repo.FetchOne(x => x.IsExpired == false && x.Site == site.urlParameter && x.Layer == item.Layer && x.WebMappingAppLoggedInUsername == item.WebMappingAppLoggedInUsername);
                if (existingItem != null)
                    item = existingItem;
                else
                    repo.SaveOne(item, x => x.Site == site.urlParameter && x.AuthKey == item.AuthKey);

#if DEBUG
                /// We have a magic auth key that always returns "admin" as the username. Using this we can make localhost debugging easier to do.
                item.AuthKey = Repositories.GeoServerAuthKeyRepository.MagicAdminAuthKey;
#endif

                sb.AppendLine("authkey: '" + item.AuthKey + "', ");
            }

            switch(ImageFormat)
            {
                case WMSImageFormat.PNG:
                    sb.AppendLine("format: 'image/png',");
                    break;
                case WMSImageFormat.JPEG:
                    sb.AppendLine("format: 'image/jpg',");
                    break;
                default:
                    throw new NotImplementedException("Unknown WMSImageFormat"+ImageFormat.ToString());
            }
            if (Transparent)
                sb.AppendLine("transparent: true,");
            else
                sb.AppendLine("transparent: false,");



            sb.AppendLine("    detectRetina: " + detectRetina.ToString().ToLower() + ",");
            sb.AppendLine("    opacity: " + opacity.ToString() + ",");
            sb.AppendLine("    useCors: " + useCors.ToString().ToLower() + ",");
            if (quotedSubDomains.Count > 0)
            {
                sb.AppendLine("    subdomains: [" + String.Join(",", quotedSubDomains) + "],");
            }
            if (bounds != null)
            {
                sb.AppendLine("    bounds: L.latLngBounds(L.latLng(" + bounds.SouthWest.Latitude + "," + bounds.SouthWest.Longitude + "), L.latLng(" + bounds.NorthEast.Latitude + "," + bounds.NorthEast.Longitude + ")),");
            }
            sb.AppendLine("    maxNativeZoom: 20,");
            sb.AppendLine("    maxZoom: 20");
		    sb.AppendLine("});");

            return sb.ToString();
        }

        public string getAuthToken(TokenMode mode)
        {
            return "";
        }

        public WMSLayer()
        {
            WMSLayerNames = new List<string>();
            ImageFormat = WMSImageFormat.PNG;
            Transparent = false;
        }
        
    }
}