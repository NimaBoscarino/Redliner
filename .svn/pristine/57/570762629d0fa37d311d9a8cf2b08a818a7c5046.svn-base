using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Http;
using System.Web.Mvc;
using System.Web.Optimization;
using System.Web.Routing;
using System.Web.Security;
using log4net;
using log4net.Config;

namespace Hatfield.WebMap
{
    public class MvcApplication : System.Web.HttpApplication
    {
        private static readonly ILog log = LogManager.GetLogger("Application");
        protected void Application_Start()
        {
            XmlConfigurator.ConfigureAndWatch(new FileInfo(Server.MapPath("~/log4net.config")));
            AreaRegistration.RegisterAllAreas();
            GlobalConfiguration.Configure(WebApiConfig.Register);
            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);
            RouteConfig.RegisterRoutes(RouteTable.Routes);
            BundleConfig.RegisterBundles(BundleTable.Bundles);
        }

        protected void FormsAuthentication_OnAuthenticate(Object sender, FormsAuthenticationEventArgs e)
        {
            if (FormsAuthentication.CookiesSupported == true)
            {
                if (Request.Cookies[FormsAuthentication.FormsCookieName] != null)
                {
                    try
                    {
                        //let us take out the username now                
                        string username = FormsAuthentication.Decrypt(Request.Cookies[FormsAuthentication.FormsCookieName].Value).Name;
                    }
                    catch
                    { }
                }
            }
        } // FormsAuthentication_OnAuthenticate

        protected void Application_Error(object sender, EventArgs e)
        {

            var currentContext = HttpContext.Current;

            var exception = Server.GetLastError().GetBaseException();

            if (exception is HttpException)
            {

                var httpException = exception as HttpException;

                if (httpException.GetHttpCode() == 404)
                {

                    log.Warn(

                        string.Format("\nUser: {0}\nURL: {1}",

                        HttpContext.Current.User != null ? HttpContext.Current.User.Identity.Name : "Unknown",

                            HttpContext.Current.Request.RawUrl),

                        exception);

                    return;

                }

            }

            var context = HttpContext.Current;

            if (exception.Message == "File does not exist.")

                return;

            var filePath = context.Request.FilePath;

            if (!string.IsNullOrEmpty(filePath) &&

                (filePath == "/favicon.ico" || filePath.EndsWith(".js") || filePath.EndsWith(".css"))

               )

                return;

            log.Error(

                string.Format("\nUser: {0}\nURL: {1}",

                HttpContext.Current.User != null ? HttpContext.Current.User.Identity.Name : "Unknown",

                    HttpContext.Current.Request.RawUrl),

                exception);

        }

    }
}
