@using Hatfield.WebMap.ViewModels.BienHoaData
@using System.Reflection
@model Hatfield.WebMap.ViewModels.BienHoaData.BienHoaDUReport
@functions{
    public string UppercaseFirst(string s)
    {
        // Check for empty string.
        if (string.IsNullOrEmpty(s))
        {
            return string.Empty;
        }
        // Return char and concat substring.
        return char.ToUpper(s[0]) + s.Substring(1).ToLower();
    }
    public Nullable<decimal> ToDecimal(string s)
    {
        Nullable<decimal> ret = null;
        if (!string.IsNullOrWhiteSpace(s))
        {
            decimal d = decimal.Zero;
            if (decimal.TryParse(s, out d))
            {
                return d;
            }
        }

        return ret;
    }

    public string FormatNumber(Nullable<decimal> num)
    {
        if (num.HasValue)
        {
            return num.Value.ToString("N1");
        }
        return "";
    }

    public string FormatNumber(string num)
    {
        return FormatNumber(ToDecimal(num));
    }

    public HtmlString renderTEQTableRow(object obj, string propertyName, string label, Nullable<decimal> TEQLimit)
    {
        System.Text.StringBuilder ret = new System.Text.StringBuilder();
        if (obj.GetType().GetProperty(propertyName) == null)
            return new HtmlString("");
        
        var valObj = obj.GetType().GetProperty(propertyName).GetValue(obj);
        {
            Nullable<decimal> valToDisplay = null;
            if (valObj is string)
            {
                valToDisplay = ToDecimal(valObj as string);
            }
            else if (valObj is Nullable<decimal>)
            {
                valToDisplay = valObj as Nullable<decimal>;
            }
            
            
            if (valToDisplay != null)
            {
                string rowClass = "";
                if (TEQLimit.HasValue && valToDisplay.Value > TEQLimit.Value)
                {
                    rowClass = "danger";
                }
                ret.AppendFormat("<tr class=\"{0}\">", rowClass);
                ret.AppendFormat("<td>{0}</td><td>{1} ppt</td>", label, valToDisplay.Value.ToString("N1"));
                ret.Append("</tr>");
                    
            }
            
        }
        return new HtmlString(ret.ToString());
    }
    
    bool wasSampled(Hatfield.WebMap.Domain.BienHoaData.v_subDU_levels subDU)
    {
        if(string.IsNullOrEmpty(subDU.Total_TEQ_0_15) && 
            string.IsNullOrEmpty(subDU.Total_TEQ_0_30) &&
            string.IsNullOrEmpty(subDU.Total_TEQ_15_30) && 
        string.IsNullOrEmpty(subDU.Total_TEQ_30_45) && 
        string.IsNullOrEmpty(subDU.Total_TEQ_30_60) && 
        string.IsNullOrEmpty(subDU.Total_TEQ_60_90) && 
        string.IsNullOrEmpty(subDU.Total_TEQ_90_120) && 
        string.IsNullOrEmpty(subDU.Total_TEQ_120_150) && 
        string.IsNullOrEmpty(subDU.Total_TEQ_150_180) && 
        string.IsNullOrEmpty(subDU.Total_TEQ_240_270))
        {
            return false;
        }
        return true;
    }

}

@if (Model.DU != null)
{
    <h5 class="leaflet-control-toc-title leaflet-control-hatbeinhoasidebar-title"><img src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/images/marker-icon.png"> @Model.DU.DU_ID Report</h5>
    <div class="well well-sm">Values<div style="background-color: #f2dede; display: inline; "> shaded in red </div>exceed the action level.</div>
    <table class="table table-condensed table-bordered " border="1" cellpadding="2" cellspacing="2">
        <tbody>            
            <tr>
                <td>Land Use:</td>
                <td>@Model.DU.LandUse </td>
            </tr>
            <tr>
                <td>Action Level:</td>
                <td> @string.Format("{0:N1}", Model.DU.TEQLimit) ppt </td>
            </tr>
        </tbody>
    </table>
    <h5 class="leaflet-control-hatbeinhoasidebar-subtitle">DU @Model.DU.MEDIA Results</h5>
    <table class="table table-condensed table-bordered " border="1" cellpadding="2" cellspacing="2">
        <tbody>            
            @renderTEQTableRow(Model.DU, "Total_TEQ_0_15", "0 - 15cm", Model.DU.TEQLimit)
            @renderTEQTableRow(Model.DU, "Total_TEQ_0_30", "0 - 30cm", Model.DU.TEQLimit)
            @renderTEQTableRow(Model.DU, "Total_TEQ_0_100", "0 - 100cm", Model.DU.TEQLimit)
            @renderTEQTableRow(Model.DU, "Total_TEQ_15_30", "15 - 30cm", Model.DU.TEQLimit)
            @renderTEQTableRow(Model.DU, "Total_TEQ_30_45", "30 - 45cm", Model.DU.TEQLimit)
            @renderTEQTableRow(Model.DU, "Total_TEQ_30_60", "30 - 60cm", Model.DU.TEQLimit)
            @renderTEQTableRow(Model.DU, "Total_TEQ_60_90", "60 - 90cm", Model.DU.TEQLimit)
            @renderTEQTableRow(Model.DU, "Total_TEQ_90_120", "90 - 120cm", Model.DU.TEQLimit)
            @renderTEQTableRow(Model.DU, "Total_TEQ_120_150", "120 - 150cm", Model.DU.TEQLimit)
            @renderTEQTableRow(Model.DU, "Total_TEQ_150_180", "150 - 180cm", Model.DU.TEQLimit)
            @renderTEQTableRow(Model.DU, "Total_TEQ_180_210", "180 - 210cm", Model.DU.TEQLimit)
            @renderTEQTableRow(Model.DU, "Total_TEQ_210_240", "210 - 240cm", Model.DU.TEQLimit)
            @renderTEQTableRow(Model.DU, "Total_TEQ_240_270", "240 - 270cm", Model.DU.TEQLimit)
            @renderTEQTableRow(Model.DU, "Total_TEQ_270_300", "270 - 300cm", Model.DU.TEQLimit)
            @renderTEQTableRow(Model.DU, "Total_TEQ_300_330", "300 - 330cm", Model.DU.TEQLimit)
            @renderTEQTableRow(Model.DU, "Total_TEQ_300_330", "330 - 390cm", Model.DU.TEQLimit)
        </tbody>
     </table>
    if (Model.SubDUs.Count() > 0)
    {
        foreach (var subDU in Model.SubDUs)
        {
            <h5 class="leaflet-control-hatbeinhoasidebar-subtitle">Sub-DU '@subDU.subDU' @subDU.Media Results</h5>
            if (!wasSampled(subDU))
            {
                <div style="padding-left: 10px; border-left: 2px solid #CCC;"><em><i class="glyphicon glyphicon-ban-circle"></i> No @subDU.Media.ToLower() sampling results are available.</em></div>
            }
            else
            { 
            <table class="table table-condensed table-bordered " border="1" cellpadding="2" cellspacing="2">
                <tbody>
                    @renderTEQTableRow(subDU, "Total_TEQ_0_15", "0 - 15cm", Model.DU.TEQLimit)
                    @renderTEQTableRow(subDU, "Total_TEQ_0_30", "0 - 30cm", Model.DU.TEQLimit)
                    @renderTEQTableRow(subDU, "Total_TEQ_0_100", "0 - 100cm", Model.DU.TEQLimit)
                    @renderTEQTableRow(subDU, "Total_TEQ_15_30", "15 - 30cm", Model.DU.TEQLimit)
                    @renderTEQTableRow(subDU, "Total_TEQ_30_45", "30 - 45cm", Model.DU.TEQLimit)
                    @renderTEQTableRow(subDU, "Total_TEQ_30_60", "30 - 60cm", Model.DU.TEQLimit)
                    @renderTEQTableRow(subDU, "Total_TEQ_60_90", "60 - 90cm", Model.DU.TEQLimit)
                    @renderTEQTableRow(subDU, "Total_TEQ_90_120", "90 - 120cm", Model.DU.TEQLimit)
                    @renderTEQTableRow(subDU, "Total_TEQ_120_150", "120 - 150cm", Model.DU.TEQLimit)
                    @renderTEQTableRow(subDU, "Total_TEQ_150_180", "150 - 180cm", Model.DU.TEQLimit)
                    @renderTEQTableRow(subDU, "Total_TEQ_180_210", "180 - 210cm", Model.DU.TEQLimit)
                    @renderTEQTableRow(subDU, "Total_TEQ_210_240", "210 - 240cm", Model.DU.TEQLimit)
                    @renderTEQTableRow(subDU, "Total_TEQ_240_270", "240 - 270cm", Model.DU.TEQLimit)
                    @renderTEQTableRow(subDU, "Total_TEQ_270_300", "270 - 300cm", Model.DU.TEQLimit)
                    @renderTEQTableRow(subDU, "Total_TEQ_300_330", "300 - 330cm", Model.DU.TEQLimit)
                    @renderTEQTableRow(subDU, "Total_TEQ_300_330", "330 - 390cm", Model.DU.TEQLimit)
                </tbody>
            </table>
            }
        }
    }

    if (Model.FishSamplesInDU.Count() > 0)
    {
        foreach (var fish in Model.FishSamplesInDU)
        {
            var condDisplay = FormatNumber(fish.CONC_FOUND);
            var concValue = ToDecimal(fish.CONC_FOUND);
            var rowClass = "";
            if (concValue.HasValue && fish.Limit.HasValue && concValue.Value > fish.Limit.Value)
            {
                rowClass = "danger";
            }
            <h5 class="leaflet-control-hatbeinhoasidebar-subtitle">Fish Sample (@UppercaseFirst(fish.MATRIX)) Results</h5>
            <table class="table table-condensed table-bordered " border="1" cellpadding="2" cellspacing="2">
                <tbody>
                    <tr><td>Matrix:</td><td>@UppercaseFirst(fish.MATRIX)</td></tr>
                    <tr><td>Action Level:</td><td>@fish.Limit @fish.UNIT</td></tr>
                    
                    <tr class="@rowClass"><td>Concentration Found:</td><td>@condDisplay @fish.UNIT</td></tr>
                    <tr><td>Sample ID:</td><td>@fish.Sample_ID</td></tr>
                </tbody>
            </table>
        }
    }
    else
    {
        <h5 class="leaflet-control-hatbeinhoasidebar-subtitle">@Model.DU.DU_ID Fish Samples</h5>
        <div style="padding-left: 10px; border-left: 2px solid #CCC;"><em><i class="glyphicon glyphicon-ban-circle"></i> No Fish samples are available.</em></div>
    }

    if (Model.WaterSamplesInDU.Count() > 0)
    {
        foreach (var water in Model.WaterSamplesInDU)
        {
            var concDisplay = FormatNumber(water.Concentration_Found);            
            var rowClass = "";
            //if (water.CONC_FOUND.HasValue && water.Limit.HasValue && water.CONC_FOUND.Value > water.Limit.Value)
            //{
            //    rowClass = "danger";
            //}
            <h5 class="leaflet-control-hatbeinhoasidebar-subtitle">Water Sample '@water.OBJECTID' Results</h5>
            <table class="table table-condensed table-bordered " border="1" cellpadding="2" cellspacing="2">
                <tbody>
                    <tr><td>Well ID:</td><td>@water.DU_ID</td></tr>
                    <tr><td>Action Level:</td><td>@water.Action_Level</td></tr>
                    <tr class="@rowClass"><td>Concentration Found:</td><td>@concDisplay</td></tr>
                    <tr><td>Media:</td><td>@water.Media</td></tr>
                    
                </tbody>
            </table>
        }
    }
    else
    {
        <h5 class="leaflet-control-hatbeinhoasidebar-subtitle">@Model.DU.DU_ID Water Samples</h5>
        <div style="padding-left: 10px; border-left: 2px solid #CCC;"><em><i class="glyphicon glyphicon-ban-circle"></i> No water samples are available.</em></div>
    }


}
else
{
    
        var results = Model.PointReportJson.GetValue("results");
        if (results != null && results is Newtonsoft.Json.Linq.JArray && (results as Newtonsoft.Json.Linq.JArray).Count > 0 )
        {
            <div class="leaflet-control-toc-title leaflet-control-hatbeinhoasidebar-title"><img src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/images/marker-icon.png"> Map Point Report:</div>
            foreach (var r in results as Newtonsoft.Json.Linq.JArray)
            {
                var rObj = r as Newtonsoft.Json.Linq.JObject;
                var attrObj = rObj.GetValue("attributes") as Newtonsoft.Json.Linq.JObject;
                <h5 class="leaflet-control-hatbeinhoasidebar-subtitle">@rObj.GetValue("layerName")</h5>
    
                if (attrObj.Properties().Where(x => attrObj.GetValue(x.Name).ToString() != "Null").Count() <= 3)
                {
                    <div style="padding-left: 10px; border-left: 2px solid #CCC;"><em><i class="glyphicon glyphicon-ban-circle"></i> No sampling results are available.</em></div>
                }
                else
                {
                    <table class="table table-condensed table-bordered " border="1" cellpadding="2" cellspacing="2">
                        @foreach (var prop in attrObj.Properties())
                        {
                            var val = attrObj.GetValue(prop.Name);
                            if (val != null && val.ToString() != "Null" && val.ToString().Trim() != "" && prop.Name.ToString() != "Shape" && prop.Name.ToString() != "OBJECTID" && prop.Name.ToString() != "Join_Count"
                                && prop.Name.ToString() != "TARGET_FID" && prop.Name.ToString() != "EASTING" && prop.Name.ToString() != "NORTHING" && prop.Name.ToString() != "Exceeds" && prop.Name.ToString() != "SHAPE")
                            {
                                <tr><td>@prop.Name</td><td>@attrObj.GetValue(prop.Name)</td></tr>
                            }
                        }
                    </table>
                }

            }
        }
        else
        {
            <div class="leaflet-control-toc-title leaflet-control-hatbeinhoasidebar-title"><img src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/images/marker-icon.png"> Map Point Report:</div>
            <div class="well"><i class="glyphicon glyphicon-ban-circle"></i> Nothing searchable was found at this point on the map. Try clicking somewhere else.</div>
        }

    


}

