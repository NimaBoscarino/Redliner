using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace Hatfield.WebMap.Domain.Layers
{
    public class ESRIDynamicMapLayer: IMapLayer
    {
        public string DisplayName { get; set; }
        public string Url { get; set; }
        
        /// <summary>
        /// set opacity to double.NaN or double.Infinity to not output the opacity configuration
        /// </summary>
        public double opacity { get; set; }
        public bool useCors { get; set;  }
        public bool RequiresAuthentication { get; set; }

        public bool InitiallyVisible { get; set; }        
        public bool Queryable { get; set; }

        public int[] TOCRadioButtonEsriLayerIds { get; set; }
        

        public ESRIDynamicMapLayer()
        {
            Url = String.Empty;
            useCors = false;
            RequiresAuthentication = false;
            InitiallyVisible = true;
            Queryable = true;
            TOCRadioButtonEsriLayerIds = new int[0];            
        }

        public string getJavascriptCreateStatement(string jsVarNameToCreate, WebMappingSite site)
        {
            System.Text.StringBuilder ret = new System.Text.StringBuilder();
            ret.AppendLine("var "+jsVarNameToCreate+" = L.esri.dynamicMapLayer({");
            ret.AppendLine("    url: '" + Url + "',");
            ret.AppendLine("    format: 'png32',");
            if (!double.IsNaN(opacity) && !double.IsInfinity(opacity))
            {
                ret.AppendLine("    opacity: " + opacity.ToString() + ",");
            
            }
            
            ret.AppendLine("    transparent: true, ");            
            ret.AppendLine("    useCors: " + useCors.ToString().ToLower() );            
            ret.AppendLine("});");

            if (RequiresAuthentication)
            {
                
                // get the login URL. source: https://msdn.microsoft.com/en-us/library/cc668176(v=vs.140).aspx
                var loginRoute = site.GetLoginPageRoute();

                var vpd = System.Web.Routing.RouteTable.Routes.GetVirtualPath(null, loginRoute);
                string loginUrl = vpd.VirtualPath;

                ret.AppendLine(jsVarNameToCreate + ".on('authenticationrequired',function(e){ console.log('authenticationrequired');  console.log(e); window.location.href = \"" + loginUrl + "\"; })");

            }

            return ret.ToString();

        }

        public string getAuthToken(Domain.TokenMode mode)
        {
            return Controllers.HomeController.getArcGISToken(mode);
        }
        
        
    }
}