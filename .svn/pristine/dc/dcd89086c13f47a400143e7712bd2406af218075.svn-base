using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using System.Data.Entity.Spatial;
using Hatfield.WebMap.Domain.BienHoaData;

namespace Hatfield.WebMap.Controllers
{
    public class BienHoaDataController : Controller
    {
        private BienHoaDataEntities db = new BienHoaDataEntities();
        protected Repositories.SiteRepository siteRepo;

        public BienHoaDataController()
        {
            siteRepo = new Repositories.SiteRepository();
        }

        // GET: BienHoaData
        public ActionResult Index(string site)
        {
            Domain.WebMappingSite reqSite = siteRepo.GetByUrlParameter(site);
            if (reqSite == null)
                return new HttpNotFoundResult("Web mapping site " + site + " not found");
            if (reqSite.NeedsToRedirectToLoginPage())
                return reqSite.RedirectToLoginPageAction();
            
            ViewBag.site = reqSite;

            return View(db.CLEANUP_LEVELS.ToList());
        }

        // GET: BienHoaData/Details/5
        public ActionResult Details(string site, int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            Domain.WebMappingSite reqSite = siteRepo.GetByUrlParameter(site);
            if (reqSite == null)
                return new HttpNotFoundResult("Web mapping site " + site + " not found");
            if (reqSite.NeedsToRedirectToLoginPage())
                return reqSite.RedirectToLoginPageAction();

            ViewBag.site = reqSite;

            CLEANUP_LEVELS dU_LEVELS = db.CLEANUP_LEVELS.Find(id);
            if (dU_LEVELS == null)
            {
                return HttpNotFound();
            }
            return View(dU_LEVELS);
        }
        

        // GET: BienHoaData/Edit/5
        public ActionResult Edit(string site, int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            Domain.WebMappingSite reqSite = siteRepo.GetByUrlParameter(site);
            if (reqSite == null)
                return new HttpNotFoundResult("Web mapping site " + site + " not found");
            if (reqSite.NeedsToRedirectToLoginPage())
                return reqSite.RedirectToLoginPageAction();

            ViewBag.site = reqSite;

            CLEANUP_LEVELS dU_LEVELS = db.CLEANUP_LEVELS.Find(id);
            if (dU_LEVELS == null)
            {
                return HttpNotFound();
            }
            return View(dU_LEVELS);
        }

        // POST: BienHoaData/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(string site, [Bind(Include = "OBJECTID,TEQLimit")] CLEANUP_LEVELS postedDU_LEVELS)
        {
            Domain.WebMappingSite reqSite = siteRepo.GetByUrlParameter(site);
            if (reqSite == null)
                return new HttpNotFoundResult("Web mapping site " + site + " not found");
            if (reqSite.NeedsToRedirectToLoginPage())
                return reqSite.RedirectToLoginPageAction();

            ViewBag.site = reqSite;

            if (ModelState.IsValid)
            {
                CLEANUP_LEVELS dU_LEVELS = db.CLEANUP_LEVELS.Find(postedDU_LEVELS.OBJECTID);
                if (dU_LEVELS.TEQLimit != postedDU_LEVELS.TEQLimit && postedDU_LEVELS.TEQLimit != null)
                {
                    Hatfield.WebMap.Repositories.DUOrigionalLimitRepository origLimitRepo = new Hatfield.WebMap.Repositories.DUOrigionalLimitRepository();
                    var origLimit = origLimitRepo.FetchOne(x => x.OBJECTID == postedDU_LEVELS.OBJECTID);
                    if (origLimit == null || origLimit == default(Repositories.DUOrigionalLimit))
                    {
                        origLimit = new Repositories.DUOrigionalLimit() { OBJECTID = postedDU_LEVELS.OBJECTID, DU_ID = dU_LEVELS.DU, OrigionalLimit = dU_LEVELS.TEQLimit };
                        origLimitRepo.SaveOne(origLimit, x => x.OBJECTID == postedDU_LEVELS.OBJECTID);
                    }
                    else if (origLimit != null && origLimit.OrigionalLimit != null && origLimit.OrigionalLimit == postedDU_LEVELS.TEQLimit)
                    {
                        // posted limit == origional limit:: delete existing record
                        origLimitRepo.DeleteOne(x => x.OBJECTID == postedDU_LEVELS.OBJECTID);
                    }
                    
                    db.Entry(dU_LEVELS).State = EntityState.Modified;
                    dU_LEVELS.TEQLimit = postedDU_LEVELS.TEQLimit;
                    db.SaveChanges();
                }
                return RedirectToAction("Index");
            }
            return View(postedDU_LEVELS);
        }

        

        /*
        public static System.Data.Entity.Spatial.DbGeometry Project(System.Data.Entity.Spatial.DbGeometry source,
            DotSpatial.Projections.ProjectionInfo pStart, DotSpatial.Projections.ProjectionInfo pEnd)
        {
            // source: https://github.com/shaahink/GeoToolkit/blob/master/GeoToolkit/DbGeometry/DbGeometryHelper.cs
            var wkt = source.WellKnownValue.WellKnownText;
            var wktReader = new NetTopologySuite.IO.WKTReader();
            var geometry = wktReader.Read(wkt);
            var featureSet = new DotSpatial.Data.FeatureSet();
            featureSet.Features.Add(geometry.ToDotSpatial());
            featureSet.Projection = pStart;
            featureSet.Reproject(pEnd);
            var projected =
                (featureSet.Features.First().BasicGeometry as GeoAPI.Geometries.IGeometry).ToGeoAPI();
            var wktWriter = new NetTopologySuite.IO.WKTWriter();
            var projectedWkt = wktWriter.Write(projected);
            return System.Data.Entity.Spatial.DbGeometry.FromText(projectedWkt);
        }
        */
        [HttpGet]
        public ActionResult GeoJsonReport(string site, double lat, double lng, string pointReportLayerIds, string imageDisplay, string mapExtent)
        {
            try
            {
                Domain.WebMappingSite reqSite = siteRepo.GetByUrlParameter(site);
                if (reqSite == null)
                    return Content(Newtonsoft.Json.JsonConvert.SerializeObject(new ErrorMessage("Web Mapping site not found.")), "application/json");

                if (reqSite.NeedsToRedirectToLoginPage())
                    return Content(Newtonsoft.Json.JsonConvert.SerializeObject(new ErrorMessage("You need to login to access this resource.")), "application/json");

                var report = FetchDUReport(lat, lng, pointReportLayerIds, imageDisplay, mapExtent);

                string json = Newtonsoft.Json.JsonConvert.SerializeObject(report);
                return Content(json, "application/json");
            }
            catch(Exception ex)
            {
                return Content(Newtonsoft.Json.JsonConvert.SerializeObject(new ErrorMessage(ex.Message)), "application/json");
            }
        }

        public ActionResult DUReport(string site, double lat, double lng, string pointReportLayerIds, string imageDisplay, string mapExtent)
        {
            try
            {
                Domain.WebMappingSite reqSite = siteRepo.GetByUrlParameter(site);
                if (reqSite == null)
                    return Content(Newtonsoft.Json.JsonConvert.SerializeObject(new ErrorMessage("Web Mapping site not found.")), "application/json");

                if (reqSite.NeedsToRedirectToLoginPage())
                    return Content(Newtonsoft.Json.JsonConvert.SerializeObject(new ErrorMessage("You need to login to access this resource.")), "application/json");

                var report = FetchDUReport(lat, lng, pointReportLayerIds, imageDisplay, mapExtent);                

                return PartialView("_BienHoaDUReport", report);
            }
            catch (Exception ex)
            {
                return Content(Newtonsoft.Json.JsonConvert.SerializeObject(new ErrorMessage(ex.Message)), "application/json");
            }
        }

        private ViewModels.BienHoaData.BienHoaDUReport FetchDUReport(double lat, double lng, string pointReportLayerIds, string imageDisplay, string mapExtent)
        {
            ViewModels.BienHoaData.BienHoaDUReport report = new ViewModels.BienHoaData.BienHoaDUReport();
            report.DU = FetchDU(lat, lng);
            if (report.DU != null)
            {
                report.SubDUs = FetchSubDUs(report.DU);
                report.FishSamplesInDU = FetchFish(report.DU);
                report.WaterSamplesInDU = FetchWater(report.DU);
            }
            else
            {
                /*
https://maps.hatfieldgroup.com/maps/rest/services/USAID6185_testing/USAID_BienHoa_20150729_sde_epsg3857/MapServer/identify
?sr=4326
&layers=all%3A53%2C54%2C96%2C98
&tolerance=5
&returnGeometry=true
&imageDisplay=1138%2C598%2C96
&mapExtent=106.7662525177002%2C10.941191793456534%2C106.86392784118652%2C10.99158126332869
&geometry=106.81509017944336%2C10.96638760178127
&geometryType=esriGeometryPoint
&token=0lg0wBHhuTZhqLcZBWuSz5fGn1Lh7xAtjeWatVmBncxNCiFsu0YcQeMD36rW_VOq
&callback=window._EsriLeafletCallbacks.c10&f=json&token=0lg0wBHhuTZhqLcZBWuSz5fGn1Lh7xAtjeWatVmBncxNCiFsu0YcQeMD36rW_VOq
                 */

                UriBuilder identifyUrl = new UriBuilder("https", "maps.hatfieldgroup.com");
                identifyUrl.Path = "/maps/rest/services/USAID6185_testing/USAID_BienHoa_20150729_sde_epsg3857/MapServer/identify";

                var queryString = System.Web.HttpUtility.ParseQueryString(string.Empty);

                queryString.Add("f", "json");
                queryString.Add("sr", "4326");
                queryString.Add("layers", "all:" + pointReportLayerIds);
                queryString.Add("tolerance", "5");
                queryString.Add("returnGeometry", "false");
                queryString.Add("imageDisplay", imageDisplay);
                queryString.Add("geometryType", "esriGeometryPoint");
                queryString.Add("geometry", lng + "," + lat);
                
                // to get full extent: https://maps.hatfieldgroup.com/maps/rest/services/USAID6185_testing/USAID_BienHoa_20150729_sde_epsg3857/MapServer?option=footprints&outSR=4326
                // "extent":{"xmin":106.79116154930632,"ymin":10.962035256733087,"xmax":106.84552064339242,"ymax":10.984418395329925,"spatialReference":{"wkid":4326}},

                
                // queryString.Add("mapExtent", "106.79116154930632,10.962035256733087,106.84552064339242,10.984418395329925"); // <xmin>, <ymin>, <xmax>, <ymax>
                queryString.Add("mapExtent", mapExtent);
                queryString.Add("token", HomeController.getArcGISToken(Domain.TokenMode.ServerToServer));
                

                identifyUrl.Query = queryString.ToString(); // Returns "key1=value1&key2=value2", all URL-encoded

                System.Net.WebClient webReq = new WebClient();
                string strJson = webReq.DownloadString(identifyUrl.Uri);

                var jsonObj = Newtonsoft.Json.JsonConvert.DeserializeObject(strJson);
                report.PointReportJson = jsonObj as Newtonsoft.Json.Linq.JObject;

                report.PointReportLayerIds = pointReportLayerIds;
            }
            return report;
        }

        private class ErrorMessage
        {
            public string error;
            public ErrorMessage(string msg)
            {
                error = msg;
            }
        }

        private Domain.BienHoaData.v_DU_levels FetchDU(double lat, double lng)
        {
            var epsg3857 = DotSpatial.Projections.KnownCoordinateSystems.Projected.World.WebMercator;
            var epsg4326 = DotSpatial.Projections.KnownCoordinateSystems.Geographic.World.WGS1984;

            double[] xy = new double[] { lng, lat };
            DotSpatial.Projections.Reproject.ReprojectPoints(xy, new double[] { 1 }, epsg4326, epsg3857, 0, 1);

            var point = DbGeometry.PointFromText("POINT(" + xy[0] + " " + xy[1] + ")", 3857); // "Point(lng lat)"; 3857 or 4326?

            var lst = db.v_DU_levels.Where(x => System.Data.Entity.SqlServer.SqlSpatialFunctions.MakeValid(x.SHAPE).Intersects(point) == true);

            var count = lst.Count();
            if (count == 0)
                return null;
            else if (count == 1)
                return lst.First();
            else
                throw new Exception("Multiple DUs were found at this location. Please inform Hatfield of this message. lat: "+lat+" lng: "+lng+" ");
        }

        private IQueryable<v_subDU_levels> FetchSubDUs(v_DU_levels parentDu)
        {
            return db.v_subDU_levels.Where(x => x.DU_ID.ToUpper() == parentDu.DU_ID.ToUpper()).OrderBy(x => x.subDU);
            
        }

        private IQueryable<PHASE2_FISH> FetchFish(v_DU_levels parentDu)
        {
            return db.PHASE2_FISH.Where(x => System.Data.Entity.SqlServer.SqlSpatialFunctions.MakeValid(x.SHAPE).Intersects(parentDu.SHAPE) == true )
                .Where(x => x.CONC_FOUND != null && x.COMPOUND != null)
                .OrderBy(x => x.CONC_FOUND);
        }

        private IQueryable<PHASE2_WATER> FetchWater(v_DU_levels parentDu)
        {
            return db.PHASE2_WATER.Where(x => System.Data.Entity.SqlServer.SqlSpatialFunctions.MakeValid(x.SHAPE).Intersects(parentDu.SHAPE) == true)
                .Where(x => x.Concentration_Found != null)
                .OrderBy(x => x.Concentration_Found);
        }
        

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
