using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Hatfield.WebMap.Domain;
using System.IO;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Hatfield.WebMap.Repositories
{
    public class SiteRepository
    {

        private bool stringIsNullOrEmpty(dynamic d)
        {
            if (d == null)
                return true;
            try
            {
                string s = d.ToString();
                return string.IsNullOrEmpty(s);
            }
            catch
            {
                return true;
            }

        }

        private string getValidViewName(string view, dynamic siteDef)
        {
            if (!string.IsNullOrEmpty(view))
            {
                Dictionary<string, dynamic> viewsDict = siteDef.views.ToObject(typeof(Dictionary<string, dynamic>));
                var viewNameKey = viewsDict.Keys.Where(x => x.ToUpper() == view.ToUpper()).FirstOrDefault();
                if (viewNameKey != null)
                {
                    return viewNameKey;
                }
            }

            return getDefaultViewName(siteDef);
        }

        private string getDefaultViewName(dynamic siteDef)
        {
            Dictionary<string, dynamic> viewsDict = siteDef.views.ToObject(typeof(Dictionary<string, dynamic>));
            foreach (var viewNameKey in viewsDict.Keys)
            {
                Dictionary<string, dynamic> viewParts = siteDef.views[viewNameKey].ToObject(typeof(Dictionary<string, dynamic>));
                var isDefaultKey = viewParts.Keys.Where(x => x.ToUpper() == "isDefault".ToUpper()).FirstOrDefault();
                if (isDefaultKey != null && viewParts[isDefaultKey] is bool)
                {
                    bool isDefaultVal = (bool)viewParts[isDefaultKey];
                    if (isDefaultVal)
                        return viewNameKey;
                }
            }
            throw new Exception("No Default View has been set. (No View has isDefault property set to true)");
        }

        /// <summary>
        /// returns NULL if not found
        /// </summary>
        /// <param name="view"></param>
        private List<dynamic> getViewLayerList(string view, dynamic siteDef)
        {
            try
            {
                Dictionary<string, dynamic> viewsDict = siteDef.views.ToObject(typeof(Dictionary<string, dynamic>));
                var viewNameKey = viewsDict.Keys.Where(x => x.ToUpper() == view.ToUpper()).FirstOrDefault();
                if (viewNameKey != null)
                {

                    Dictionary<string, dynamic> viewParts = siteDef.views[viewNameKey].ToObject(typeof(Dictionary<string, dynamic>));

                    return (List<dynamic>)viewParts["layers"].ToObject(typeof(List<object>));
                }
            }
            catch
            { }
            return null;
        }

        /// <summary>
        /// returns NULL if a site matching the urlParameter can not be found in the repository
        /// </summary>
        /// <param name="urlParameter"></param>
        /// <returns></returns>
        /// 
        public WebMappingSite GetByUrlParameter(string urlParameter, string view = "")
        {
            string siteJSONFileOnDisk = System.Web.Hosting.HostingEnvironment.MapPath("~/App_Data/Sites/" + urlParameter + ".json");

            if (string.IsNullOrWhiteSpace(urlParameter))
            {
                return null;
            }
            else if (!File.Exists(siteJSONFileOnDisk))
            {                
                return null;
            }
            else 
            {
                // load site definition
                dynamic siteDef;
                using (StreamReader r = new StreamReader(siteJSONFileOnDisk))
                {
                    string json = r.ReadToEnd();
                    siteDef = JObject.Parse(json);
                }

                view = getValidViewName(view, siteDef);


                WebMappingSite ret = new WebMappingSite();
                ret.urlParameter = siteDef.urlParameter;

                ret.SiteSpecificLayoutFileName = siteDef.siteSpecificLayoutFileName;

                ret.RequiresAuthentication = siteDef.requiresAuthentication;

                if (siteDef.userNamesWithAccess != null)
                {
                    var usernames = (List<String>)siteDef.userNamesWithAccess.ToObject(typeof(List<String>));
                    ret.UsernamesWithAccess.AddRange(usernames);
                }

                // ret.UsernamesWithAccess.AddRange(new string[] { "jsuwala" });

                if (siteDef.redirectToDashboardAfterLogin != null)
                    ret.RedirectToDashboardAfterLogin = siteDef.redirectToDashboardAfterLogin;
                else
                    ret.RedirectToDashboardAfterLogin = false;

                // add map controls
                var controls = (List<String>)siteDef.mapControls.ToObject(typeof(List<String>));
                foreach (var control in controls)
                {
                    WebMapControl parsedControl;
                    if (Enum.TryParse<WebMapControl>(control, true, out parsedControl))
                    {
                        ret.MapControls.Add(parsedControl);
                    }
                    else
                        throw new InvalidSiteJSONDefition("Invalid/unknown control '" + control + "' found in " + urlParameter + " site definition file.");
                }

                if (siteDef.hasSiteSpecificCssFileName != null)
                    ret.HasSiteSpecificCssFileName = siteDef.hasSiteSpecificCssFileName;
                else
                    ret.HasSiteSpecificCssFileName = false;

                if (!stringIsNullOrEmpty(siteDef.siteSpecificCssFileName))
                    ret.SiteSpecificCssFileName = siteDef.siteSpecificCssFileName;
                else
                    ret.SiteSpecificCssFileName = "";

                if (siteDef.hasSiteSpecificMapScriptsAreaControl != null)
                    ret.HasSiteSpecific_Map_HeaderScriptsAreaControl = siteDef.hasSiteSpecificMapScriptsAreaControl;
                else
                    ret.HasSiteSpecific_Map_HeaderScriptsAreaControl = false;


                if (!stringIsNullOrEmpty(siteDef.siteSpecificMapScriptsAreaControl))
                    ret.Map_HeaderScriptsAreaControl = siteDef.siteSpecificMapScriptsAreaControl;
                else
                    ret.Map_HeaderScriptsAreaControl = "";

                if (siteDef.hasSiteSpecificTopNavigationControl != null)
                    ret.HasSiteSpecificTopNavigationControl = siteDef.hasSiteSpecificTopNavigationControl;
                else
                    ret.HasSiteSpecificTopNavigationControl = false;

                if (!stringIsNullOrEmpty(siteDef.siteSpecificTopNavigationControl))
                    ret.TopNavigationControlPath = siteDef.siteSpecificTopNavigationControl;
                else
                    ret.TopNavigationControlPath = "";

                ret.DisplayTitle = siteDef.DisplayTitle;

                ret.LoggedOutMessage = siteDef.loggedOutMessage;
                ret.LoggedOutHelpMessage = siteDef.loggedOutHelpMessage;

                float Lat = siteDef.mapCenter.lat;
                float Lng = siteDef.mapCenter.lng;
                ret.InitialMapCenter = new LatLng(Lat, Lng);
                int zoomLevel = siteDef.initialMapZoomLevel;
                ret.InitialMapZoomLevel = zoomLevel;
                

                // parse view options
                if (siteDef.views[view].displayName != null && siteDef.views[view].displayName.ToString() != "")
                    ret.ViewDisplayName = siteDef.views[view].displayName;
                else
                    ret.ViewDisplayName = string.Empty;

                // view layers

                ret.Layers = new List<Domain.IMapLayer>();    
            
                List<dynamic> layerList = getViewLayerList(view, siteDef); 
                


                foreach (var layer in layerList)
                {
                    string layerType = layer.type.ToString();
                    if (string.Compare(layerType, "WMSLayer", true) == 0)
                    {
                        var wms = new Domain.Layers.WMSLayer()
                        {
                            DisplayName = layer.displayName,
                            urlFormat = layer.urlFormat,
                            WMSLayerNames = (List<String>)layer.WMSLayerNames.ToObject(typeof(List<String>)),
                            detectRetina = layer.detectRetina,
                            opacity = layer.opacity,
                            useCors = layer.useCors,
                            maxNativeZoom = layer.maxNativeZoom,
                            maxZoom = layer.maxZoom,
                            InitiallyVisible = layer.InitiallyVisible,
                            Transparent = layer.Transparent,
                            RequiresAuthentication = layer.RequiresAuthentication
                        };

                        if (wms.RequiresAuthentication && layer.AuthenticationUsesBuiltInGeoServerAuthToken != null)
                        {
                            wms.AuthenticationUsesBuiltInGeoServerAuthToken = layer.AuthenticationUsesBuiltInGeoServerAuthToken;
                            if (wms.AuthenticationUsesBuiltInGeoServerAuthToken)
                            {
                                if (layer.GeoServerAuthTokenUsername == null || layer.GeoServerAuthTokenUsername.ToString() == "")
                                    throw new Exception("You need to specify the GeoServerAuthTokenUsername when AuthenticationUsesBuiltInGeoServerAuthToken is specified!");
                                else
                                    wms.GeoServerAuthTokenUsername = layer.GeoServerAuthTokenUsername;
                            }

                        }

                        if (layer.subdomains != null)
                        {
                            wms.subdomains = (List<String>)layer.subdomains.ToObject(typeof(List<String>));
                        }

                        ret.Layers.Add(wms);
                    }
                    else if (string.Compare(layerType, "TileLayer", true) == 0)
                    {
                        ret.Layers.Add(new Domain.Layers.TileLayer()
                        {
                            DisplayName = layer.displayName,
                            AttributionHtml = layer.attributionHtml,
                            Url = layer.url,
                            InitiallyVisible = layer.InitiallyVisible
                        });
                    }
                    else if (string.Compare(layerType, "ESRITiledMapLayerMapLayer", true) == 0)
                    {
                        ret.Layers.Add(new Domain.Layers.ESRITiledMapLayerMapLayer()
                        {
                            DisplayName = layer.displayName,
                            urlFormat = layer.urlFormat,
                            detectRetina = layer.detectRetina,
                            opacity = layer.opacity,
                            useCors = layer.useCors,
                            maxNativeZoom = layer.maxNativeZoom,
                            maxZoom = layer.maxZoom,
                            InitiallyVisible = layer.InitiallyVisible,
                            RequiresAuthentication = layer.RequiresAuthentication
                        });
                    }
                    else if (string.Compare(layerType, "GoogleMapsLayer", true) == 0)
                    {
                        ret.Layers.Add(new Domain.Layers.GoogleMapsLayer()
                        {
                            DisplayName = layer.displayName,
                            MapType = layer.mapType,
                            InitiallyVisible = layer.InitiallyVisible
                        });
                    }
                }


                // note: sort order is by layer's displayname/label

                ret.CustomTOCSortOrder = new Dictionary<string, string[]>();
                

                return ret;

            }
            

        }

        public class InvalidSiteJSONDefition: Exception
        {
            public InvalidSiteJSONDefition(string message): base(message)
            { }
        }
    } 
}